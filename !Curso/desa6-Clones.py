import streamlit as st
import datetime
from groq import Groq

# Obtener la API Key desde los secretos de Streamlit Cloud
API_KEY = "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"

# Crea el cliente de Groq con la API Key
client = Groq(api_key=API_KEY)

# Configuraci칩n de la p치gina
st.set_page_config(page_title="EL칈AS IA", page_icon="游땙", layout="centered")

def configurar_pagina():
    st.title("Chatbot de IA")
    st.sidebar.title("Configuraci칩n de la IA")
    st.sidebar.write("Modelo seleccionado: Groq")
    return "Groq"

modelo = configurar_pagina()

# Funci칩n para generar una respuesta utilizando la API de Groq
def generar_respuesta_groq(mensaje):
    try:
        chat_completion = client.chat.completions.create(
            messages=[{"role": "user", "content": mensaje}],
            model="llama3-8b-8192",  # Aseg칰rate de usar el modelo correcto
        )
        return chat_completion.choices[0].message.content
    except Exception as e:
        st.error(f"Error al obtener respuesta de Groq: {e}")
        return "Error en la API de Groq."

# Funci칩n principal para generar la respuesta del chatbot
def generar_respuesta(mensaje):
    if "crufty" in mensaje.lower():
        st.success("Felicitaciones, has mencionado al mejor de la historia.")
        return "Crufty? El mejor de todos los tiempos."
    
    return generar_respuesta_groq(mensaje)

# Manejar el historial de conversaciones en la sesi칩n
if 'historial' not in st.session_state:
    st.session_state.historial = []

# Entrada de texto para el mensaje del usuario
mensaje = st.chat_input("Escrib칤 tu mensaje:")

if mensaje:
    respuesta = generar_respuesta(mensaje)
    st.session_state.historial.append((datetime.datetime.now(), mensaje, respuesta))
    st.write(respuesta)

# Mostrar historial de conversaciones en la sidebar
st.sidebar.header("Historial de Conversaciones")
if st.session_state.historial:
    for fecha, msg, resp in st.session_state.historial:
        st.sidebar.write(f"**{fecha.strftime('%Y-%m-%d %H:%M:%S')}**")
        st.sidebar.write(f"**T칰:** {msg}")
        st.sidebar.write(f"**Bot:** {resp}")
        st.sidebar.write("---")

# Consejos de uso en la sidebar
st.sidebar.header("Consejos de Uso")
st.sidebar.write("1. Podes preguntar sobre cualquier tema.")
st.sidebar.write("2. Usa palabras clave para obtener respuestas m치s precisas.")
st.sidebar.write("3. Si necesitas ayuda, no dudes en preguntar.")
st.sidebar.write("4. Record치 que es un chatbot hecho por el genio de CRUFTY.")

# Informaci칩n adicional en la sidebar
def mostrar_informacion_adicional():
    st.sidebar.header("Informaci칩n Adicional")
    st.sidebar.write("Este chatbot est치 dise침ado por CRUFTY.")
    st.sidebar.write("Cuidadito con lo que le pregunt치s a la IA.")

mostrar_informacion_adicional()

# Opci칩n para resetear el historial de conversaciones
def resetear_historial():
    if st.sidebar.button("Resetear Historial"):
        st.session_state.historial = []
        st.success("El historial de conversaciones se resete칩. Casi te atrapa la polic칤a.")

resetear_historial()

# Mostrar estad칤sticas en la sidebar
def mostrar_estadisticas():
    total_mensajes = len(st.session_state.historial)
    st.sidebar.header("Estad칤sticas")
    st.sidebar.write(f"Total de mensajes enviados: {total_mensajes}")
    if total_mensajes > 0:
        st.sidebar.write(f"칔ltimo mensaje: '{st.session_state.historial[-1][1]}'")
    else:
        st.sidebar.write("No mandaste ning칰n mensaje todav칤a.")

mostrar_estadisticas()
